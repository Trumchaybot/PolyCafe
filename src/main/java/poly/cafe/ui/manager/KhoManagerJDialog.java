/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package poly.cafe.ui.manager;

import java.awt.Frame;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import poly.cafe.dao.ProductsDAO;
import poly.cafe.dao.impl.OrderDetailsDAOImpl;
import poly.cafe.dao.impl.ImportDetailsDAOImpl;
import poly.cafe.dao.impl.ProductDetailsDAOImpl;
import poly.cafe.dao.impl.ExportDetailsDAOImpl;
import poly.cafe.dao.impl.ProductsDAOImpl;
import poly.cafe.dao.impl.MaterialsDAOImpl;
import poly.cafe.dao.impl.ProductsDAOImpl;
import poly.cafe.entity.OrderDetails;
import poly.cafe.entity.ImportDetails;
import poly.cafe.entity.ProductDetails;
import poly.cafe.entity.ExportDetails;
import poly.cafe.entity.Orders;
import poly.cafe.entity.Products;
import poly.cafe.entity.Materials;
import poly.cafe.entity.Import;
import poly.cafe.entity.Products;
import poly.cafe.entity.Export;
import poly.cafe.util.XDialog;
import poly.cafe.dao.MaterialsDAO;
import poly.cafe.dao.ProductsDAO;

/**
 *
 * @author admin
 */
public class KhoManagerJDialog extends javax.swing.JFrame {
    private String mode;
MaterialsDAO daonl = new MaterialsDAOImpl();
ProductsDAO daosp = new ProductsDAOImpl();
List<Materials> nvll = new ArrayList<>();
private List<Products> listSanPham;
private Orders bill; // đơn hàng đang thao tác
private Products sanPham;
private Import imPort;
private Export xuatProducts;

// Phương thức để gán bill từ lớp gọi dialog
public void setBill(Orders bill) {
    this.bill = bill;
}
public void setSanPham(Products sanPham){
    this.sanPham = sanPham;
}
    /**
     * Creates new form KhoManagerJDialog
     */
    public KhoManagerJDialog() {
        initComponents();
    }
public KhoManagerJDialog(Frame owner, boolean modal) {
    super();
    initComponents();
    txtDonGia.setEditable(false);
    txtGiaTienSP.setEditable(false);
    txtTenVatLieu.setEditable(false);
}
public KhoManagerJDialog(Frame parent, boolean modal, Orders dh) {
    super();
    initComponents();
    this.bill = dh;
    lblid.setText(String.valueOf("Mã đơn hàng: " + dh.getOrderId()));
    tabs.setSelectedIndex(1);
    tabs.setEnabled(false);

}
public KhoManagerJDialog(Frame parent, boolean modal, Products sp, String mode) {
    super();
    initComponents();
    this.sanPham = sp;
    this.mode = mode;
    lblidd.setText(String.valueOf("Mã sản phẩm: " + sp.getProductId()));
    tabs.setSelectedIndex(0);
    tabs.setEnabled(false);
}
public KhoManagerJDialog(Frame parent, boolean modal, Import nk, String mode) {
    super();
    initComponents();
    this.imPort = nk;
    this.mode = mode;
    lblidd.setText(String.valueOf("Mã nhập kho: " + nk.getImportId()));
    tabs.setSelectedIndex(0);
    tabs.setEnabled(false);
}
public KhoManagerJDialog(Frame parent, boolean modal, Export xk, String mode) {
    super();
    initComponents();
    this.mode = mode;
    this.xuatProducts = xk;
    lblidd.setText(String.valueOf("Mã xuất kho: " + xk.getExportId()));
    tabs.setSelectedIndex(0);
    tabs.setEnabled(false);
}
private List<Products> selectedProductsItems = new ArrayList<>();

public List<Products> getSelectedProductsItems() {
    return selectedProductsItems;
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        tabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        txtTenVatLieu = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSoLuong = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDonGia = new javax.swing.JTextField();
        cboDonVi = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblVatLieu = new javax.swing.JTable();
        lblidd = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblidVatLieu = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtSoLuongSP = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtGiaTienSP = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblkho = new javax.swing.JTable();
        lblid = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lblidSP = new javax.swing.JLabel();
        cboSanPham = new javax.swing.JComboBox<>();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Tên vật liệu");

        jButton1.setText("Thêm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Sửa");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Xóa");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Nhập mới");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setText("Số lượng");

        jLabel3.setText("Đơn vị");

        jLabel4.setText("Đơn giá");

        cboDonVi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "cái", "mét", "cuộn", " " }));

        tblVatLieu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "id", "Tên vật liệu", "Đơn vị", "Đơn giá", "Số lượng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblVatLieu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblVatLieuMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblVatLieu);

        lblidd.setText("Chưa có sản phẩm");

        jLabel9.setText("id vật liệu:");

        lblidVatLieu.setText("Chưa có vật liệu.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cboDonVi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtTenVatLieu, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSoLuong)
                    .addComponent(txtDonGia))
                .addGap(49, 49, 49))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(226, 226, 226))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblidd)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblidVatLieu)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(lblidVatLieu))
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTenVatLieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboDonVi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblidd)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabs.addTab("Nguyên vật liệu", jPanel1);

        jLabel5.setText("Tên sản phẩm:");

        jButton10.setText("Cập nhập số lượng");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel6.setText("Số lượng:");

        jLabel8.setText("Đơn giá:");

        txtGiaTienSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGiaTienSPActionPerformed(evt);
            }
        });

        tblkho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "id", "Tên sản phẩm", "Giá tiền", "Số lượng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblkho.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblkhoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblkho);

        lblid.setText("id đơn hàng: ");

        jLabel10.setText("id sản phẩm:");

        cboSanPham.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGiaTienSP)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSoLuongSP, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblidSP))
                    .addComponent(lblid)
                    .addComponent(jButton10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(lblidSP))
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(txtGiaTienSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(cboSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtSoLuongSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabs.addTab("Sản phẩm", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblkhoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblkhoMouseClicked
       if (evt.getClickCount() == 2) {
    this.addProductsToBill(bill);
} else if (evt.getClickCount() == 1) {
    this.editSP();
}

    }//GEN-LAST:event_tblkhoMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_formWindowClosed

    private void tblVatLieuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblVatLieuMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount() == 2){
        if("SANPHAM".equalsIgnoreCase(mode)){
            this.addVatLieuToSanPham(sanPham);
        } else if("NHAPKHO".equalsIgnoreCase(mode)){
            this.addVatLieuToImport(imPort);
        } else if("XUATKHO".equalsIgnoreCase(mode)){
            this.addVatLieuToXuatProducts(xuatProducts);
        }
    }
        if(evt.getClickCount() == 1){
            this.editNVL();
        }
    }//GEN-LAST:event_tblVatLieuMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.createNVL();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.updateNVL();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.deleteNVL();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        this.resetNVL();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtGiaTienSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGiaTienSPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGiaTienSPActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        this.updateSP();
    }//GEN-LAST:event_jButton10ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KhoManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KhoManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KhoManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KhoManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KhoManagerJDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboDonVi;
    private javax.swing.JComboBox<String> cboSanPham;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblid;
    private javax.swing.JLabel lblidSP;
    private javax.swing.JLabel lblidVatLieu;
    private javax.swing.JLabel lblidd;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblVatLieu;
    private javax.swing.JTable tblkho;
    private javax.swing.JTextField txtDonGia;
    private javax.swing.JTextField txtGiaTienSP;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JTextField txtSoLuongSP;
    private javax.swing.JTextField txtTenVatLieu;
    // End of variables declaration//GEN-END:variables
public void open() {
         this.setLocationRelativeTo(null);
this.fillToTableChiTiet();
this.fillToTableSanPham();
this.loadSanPhamToComboBox();
    }
    public void fillToTableChiTiet() {
    DefaultTableModel model = (DefaultTableModel) tblVatLieu.getModel();
    model.setRowCount(0); // Xóa dữ liệu cũ

    List<Materials> list = daonl.findAll(); // Lấy danh sách vật liệu từ CSDL

    for (Materials vl : list) {
        Object[] row = {
            vl.getMaterialId(),
            vl.getMaterialName(),
            vl.getUnit(),
            vl.getUnitPrice(),
            vl.getQuantity()
        };
        model.addRow(row);
    }
}
    public void fillToTableSanPham() {
    DefaultTableModel model = (DefaultTableModel) tblkho.getModel();
    model.setRowCount(0); // Xóa dữ liệu cũ

    List<Products> list = daosp.findKho(); // Lấy danh sách từ cơ sở dữ liệu

    for (Products products : list) {
    Object[] row = {
        products.getProductId(),
        (products.getProductName()!= null) ? products.getProductName(): "Chưa gán sản phẩm",
        products.getUnitPrice(),
        products.getQuantity()
    };
    model.addRow(row);
}

}
    public void addProductsToBill(Orders bill) {
    if (bill == null) {
        XDialog.alert(this, "Hóa đơn chưa được khởi tạo!");
        return;
    }

    int selectedRow = tblkho.getSelectedRow();
    if (selectedRow == -1) {
        XDialog.alert(this, "Vui lòng chọn sản phẩm trong kho!");
        return;
    }

    String quantityStr = XDialog.prompt("Nhập số lượng cần thêm:");
    if (quantityStr == null || quantityStr.trim().isEmpty()) {
        return;
    }

    try {
        int qty = Integer.parseInt(quantityStr.trim());

        if (qty <= 0) {
            XDialog.alert(this, "Số lượng phải lớn hơn 0!");
            return;
        }

        // Lấy sản phẩm kho được chọn
        Products selectedProducts = daosp.findKho().get(selectedRow);

        if (qty > selectedProducts.getQuantity()) {
            XDialog.alert(this, "Số lượng tồn kho không đủ!");
            return;
        }

        // Tạo chi tiết đơn hàng
        OrderDetails detail = new OrderDetails();
        detail.setOrderId(bill.getOrderId());
        detail.setProductId(selectedProducts.getProductId());
        detail.setQuantity(qty);
        detail.setTotalAmount(selectedProducts.getUnitPrice()* qty);

        // Thêm chi tiết đơn hàng vào DB
        new OrderDetailsDAOImpl().create(detail);

        // Cập nhật lại tồn kho
        selectedProducts.setQuantity(selectedProducts.getQuantity()- qty);
        daosp.updateKho(selectedProducts);

        XDialog.alert(this, "Đã thêm vào hóa đơn!");
        this.dispose();

    } catch (NumberFormatException e) {
        XDialog.alert(this, "Số lượng không hợp lệ!");
    }
}
public void addVatLieuToSanPham(Products sanPham) {
    if (sanPham == null) {
        XDialog.alert(this, "Sản phẩm chưa được khởi tạo!");
        return;
    }

    int selectedRow = tblVatLieu.getSelectedRow();
    if (selectedRow == -1) {
        XDialog.alert(this, "Vui lòng chọn Nguyên liệu trong kho!");
        return;
    }

    String quantityStr = XDialog.prompt("Nhập số lượng cần thêm:");
    if (quantityStr == null || quantityStr.trim().isEmpty()) {
        return;
    }

    try {
        int qty = Integer.parseInt(quantityStr.trim());

        if (qty <= 0) {
            XDialog.alert(this, "Số lượng phải lớn hơn 0!");
            return;
        }

        // Lấy sản phẩm kho được chọn
        Materials selected = daonl.findAll().get(selectedRow);

        if (qty > selected.getQuantity()) {
            XDialog.alert(this, "Số lượng tồn kho không đủ!");
            return;
        }

        // Tạo chi tiết đơn hàng
        ProductDetails detail = new ProductDetails();
        detail.setProductId(sanPham.getProductId());
        detail.setMaterialId(selected.getMaterialId());
        detail.setQuantity(qty);

        // Thêm chi tiết đơn hàng vào DB
        new ProductDetailsDAOImpl().create(detail);

        // Cập nhật lại tồn kho
        selected.setQuantity(selected.getQuantity()- qty);
        daonl.update(selected);

        XDialog.alert(this, "Đã thêm vào sản phẩm!");
        this.dispose();

    } catch (NumberFormatException e) {
        XDialog.alert(this, "Số lượng không hợp lệ!");
    }
}
public void addVatLieuToImport(Import imPort) {
    if (imPort == null) {
        XDialog.alert(this, "Đơn nhập chưa được khởi tạo!");
        return;
    }

    int selectedRow = tblVatLieu.getSelectedRow();
    if (selectedRow == -1) {
        XDialog.alert(this, "Vui lòng chọn Nguyên liệu trong kho!");
        return;
    }

    String quantityStr = XDialog.prompt("Nhập số lượng cần thêm:");
    if (quantityStr == null || quantityStr.trim().isEmpty()) {
        return;
    }

    try {
        int qty = Integer.parseInt(quantityStr.trim());

        if (qty <= 0) {
            XDialog.alert(this, "Số lượng phải lớn hơn 0!");
            return;
        }

        // Lấy sản phẩm kho được chọn
        Materials selected = daonl.findAll().get(selectedRow);

        // Tạo chi tiết đơn hàng
        ImportDetails detail = new ImportDetails();
        detail.setImportId(imPort.getImportId());
        detail.setMaterialId(selected.getMaterialId());
        detail.setQuantity(qty);
        detail.setTotalAmount(selected.getUnitPrice()* qty);
        
        // Thêm chi tiết đơn hàng vào DB
        new ImportDetailsDAOImpl().create(detail);

        // Cập nhật lại tồn kho
        selected.setQuantity(selected.getQuantity()- qty);
        daonl.update(selected);

        XDialog.alert(this, "Đã thêm vào sản phẩm!");
        this.dispose();

    } catch (NumberFormatException e) {
        XDialog.alert(this, "Số lượng không hợp lệ!");
    }
}
public void addVatLieuToXuatProducts(Export xuatProducts) {
    if (xuatProducts == null) {
        XDialog.alert(this, "Đơn xuất chưa được khởi tạo!");
        return;
    }

    int selectedRow = tblVatLieu.getSelectedRow();
    if (selectedRow == -1) {
        XDialog.alert(this, "Vui lòng chọn Nguyên liệu trong kho!");
        return;
    }

    String quantityStr = XDialog.prompt("Nhập số lượng cần thêm:");
    if (quantityStr == null || quantityStr.trim().isEmpty()) {
        return;
    }

    try {
        int qty = Integer.parseInt(quantityStr.trim());

        if (qty <= 0) {
            XDialog.alert(this, "Số lượng phải lớn hơn 0!");
            return;
        }

        // Lấy sản phẩm kho được chọn
        Materials selected = daonl.findAll().get(selectedRow);
        
        // Tạo chi tiết đơn hàng
        ExportDetails detail = new ExportDetails();
        detail.setExportId(xuatProducts.getExportId());
        detail.setMaterialId(selected.getMaterialId());
        detail.setQuantity(qty);
        detail.setTotalAmount(selected.getUnitPrice()* qty);

        // Thêm chi tiết đơn hàng vào DB
        new ExportDetailsDAOImpl().create(detail);

        // Cập nhật lại tồn kho
        selected.setQuantity(selected.getQuantity()- qty);
        daonl.update(selected);

        XDialog.alert(this, "Đã thêm vào đơn xuất!");
        this.dispose();

    } catch (NumberFormatException e) {
        XDialog.alert(this, "Số lượng không hợp lệ!");
    }
}
public void createNVL() {
    try {
        Materials nvl = getFormNVL();
        daonl.create(nvl);
        fillToTableChiTiet();
        resetNVL();
        javax.swing.JOptionPane.showMessageDialog(this, "Thêm mới thành công!");
    } catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Thêm mới thất bại!\n" + e.getMessage());
    }
}
public void updateNVL() {
    try {
        Materials nvl = getFormNVL();
        daonl.update(nvl);
        fillToTableChiTiet();
        resetNVL();
        javax.swing.JOptionPane.showMessageDialog(this, "Cập nhật thành công!");
    } catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Cập nhật thất bại!\n" + e.getMessage());
    }
}
public void deleteNVL() {
    try {
        int id = Integer.parseInt(lblidVatLieu.getText().trim());
        int confirm = javax.swing.JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa?", 
                                                                "Xác nhận", javax.swing.JOptionPane.YES_NO_OPTION);
        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
            daonl.deleteById(id);
            fillToTableChiTiet();
            resetNVL();
            javax.swing.JOptionPane.showMessageDialog(this, "Xóa thành công!");
        }
    } catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Xóa thất bại!\n" + e.getMessage());
    }
}
public void setFormNVL(Materials nvl) {
    lblidVatLieu.setText(String.valueOf(nvl.getMaterialId()));
    txtTenVatLieu.setText(nvl.getMaterialName());
    cboDonVi.setSelectedItem(nvl.getUnit()); // chọn đúng đơn vị
    txtDonGia.setText(String.valueOf(nvl.getUnitPrice()));
    txtSoLuong.setText(String.valueOf(nvl.getQuantity()));
}
public void resetNVL() {
    lblidVatLieu.setText("");
    txtTenVatLieu.setText("");
    cboDonVi.setSelectedIndex(0);
    txtDonGia.setText("");
    txtSoLuong.setText("");
}
public Materials getFormNVL() {
    Materials nvl = new Materials();

    // Nếu có ID (trường hợp update) thì gán
    if (!lblidVatLieu.getText().trim().isEmpty()) {
        nvl.setMaterialId(Integer.parseInt(lblidVatLieu.getText().trim()));
    }

    nvl.setMaterialName(txtTenVatLieu.getText().trim());
    nvl.setUnit(cboDonVi.getSelectedItem().toString());
    
    // Chuyển đổi số
    try {
        nvl.setUnitPrice(Float.parseFloat(txtDonGia.getText().trim()));
    } catch (NumberFormatException e) {
        nvl.setUnitPrice(0f); // hoặc throw exception nếu muốn bắt lỗi
    }

    try {
        nvl.setQuantity(Integer.parseInt(txtSoLuong.getText().trim()));
    } catch (NumberFormatException e) {
        nvl.setQuantity(0);
    }

    return nvl;
}
public void editNVL() {
    int row = tblVatLieu.getSelectedRow();
    if (row < 0) {
        return; // chưa chọn dòng nào
    }

    // lấy id từ cột 0 (ID) trên bảng
    Integer id = (Integer) tblVatLieu.getValueAt(row, 0);

    Materials nvl = daonl.findById(id);
    if (nvl != null) {
        setFormNVL(nvl);
    }
}

private Products getFormSP() {
    Products entity = new Products();

    // Không set ID nếu là auto-increment
    // Chỉ set khi edit
    if (!lblidSP.getText().trim().isEmpty()) {
        entity.setProductId(Integer.parseInt(lblidSP.getText().trim()));
    }

    // Lấy sản phẩm đã chọn trong combobox
    int index = cboSanPham.getSelectedIndex();
    if (index >= 0 && index < listSanPham.size()) {
        Products sp = listSanPham.get(index);
        entity.setProductId(sp.getProductId());
    }

 
    entity.setUnitPrice(Float.parseFloat(txtGiaTienSP.getText().trim()));
    entity.setQuantity(Integer.parseInt(txtSoLuongSP.getText().trim()));

    return entity;
}

private void setFormSP(Products entity) {
    lblidSP.setText(String.valueOf(entity.getProductId()));

    // Chọn sản phẩm trong combobox dựa trên ID
    for (int i = 0; i < listSanPham.size(); i++) {
        if (listSanPham.get(i).getProductId()== entity.getProductId()) {
            cboSanPham.setSelectedIndex(i);
            break;
        }
    }

    txtGiaTienSP.setText(String.valueOf(entity.getUnitPrice()));
    txtSoLuongSP.setText(String.valueOf(entity.getQuantity()));
}
private void updateSP() {
    Products entity = getFormSP();
    try {
        daosp.updateKho(entity);
        fillToTableSanPham();
        JOptionPane.showMessageDialog(this, "Cập nhật thành công!");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Cập nhật thất bại!");
        e.printStackTrace();
    }
}
private void editSP() {
    int row = tblkho.getSelectedRow();
    if (row < 0) return;

    int id = (int) tblkho.getValueAt(row, 0); // cột 0 là ID
    Products entity = daosp.findById(id);
    if (entity != null) {
        setFormSP(entity);
    }
}
private void loadSanPhamToComboBox() {
    listSanPham = daosp.findAll(); // lấy danh sách từ DAO
    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
    for (Products sp : listSanPham) {
        model.addElement(sp.getProductName()); // chỉ thêm tên sản phẩm
    }
    cboSanPham.setModel(model);
}
}
