/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package poly.cafe.ui.manager;

import java.awt.Color;
import java.awt.Frame;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import poly.cafe.dao.impl.ImportDetailsDAOImpl;
import poly.cafe.dao.impl.ExportDetailsDAOImpl;
import poly.cafe.dao.impl.MaterialsDAOImpl;
import poly.cafe.dao.impl.SuppliersDAOImpl;
import poly.cafe.dao.impl.ImportDAOImpl;
import poly.cafe.dao.impl.ExportDAOImpl;
import poly.cafe.entity.ImportDetails;
import poly.cafe.entity.ExportDetails;
import poly.cafe.entity.Materials;
import poly.cafe.entity.Suppliers;
import poly.cafe.entity.Import;
import poly.cafe.entity.Export;
import poly.cafe.util.XAuth;
import poly.cafe.util.XDialog;
import poly.cafe.dao.ExportDAO;
import poly.cafe.dao.ExportDetailsDAO;
import poly.cafe.dao.ImportDAO;
import poly.cafe.dao.ImportDetailsDAO;
import poly.cafe.dao.MaterialsDAO;
import poly.cafe.dao.SuppliersDAO;

/**
 *
 * @author admin
 */
public class ImAndExManagerDialog extends javax.swing.JFrame {
    private Integer nhaCungCapId = -1;
    private int selectedIdNK = -1; 
    private int selectedIdXK = -1; 
    private int currentNhapKhoId;
    private int currentXuatKhoId;
    private Import nhapKho;
    private Export xuatKho;
            
    Import nk = new Import();
    Export xk = new Export();
    
    ExportDAO daoxk = new ExportDAOImpl();
    ImportDAO daonk = new ImportDAOImpl();
    SuppliersDAO daocc = new SuppliersDAOImpl();
    MaterialsDAO daonvl = new MaterialsDAOImpl();
    ImportDetailsDAO daoctnk = new ImportDetailsDAOImpl();
    ExportDetailsDAO daoctxk = new ExportDetailsDAOImpl();


public void setNhapKho(Import nhapKho) {
        this.nhapKho = nhapKho;
    }
public void setXuatKho(Export xuatKho) {
        this.xuatKho = xuatKho;
    }

    public void setNhaCungCap(int id, String ten) {
        this.nhaCungCapId = id;
        txtSearch.setText(ten);
        if (nhapKho != null) {
            nhapKho.setSupplierId(id);
        }
    }

    public int getSupplierId() {
        return nhaCungCapId;
    }
public void setImportId(int id) {
        this.currentNhapKhoId = id;
        lblidNK.setText(String.valueOf(id));  // Gán lên label
    }

public void setExportId(int id) {
        this.currentXuatKhoId = id;
        lblidXK.setText(String.valueOf(id));  // Gán lên label
    }
public void setSelectedTab(int index) {
    tabs.setSelectedIndex(index);
}

    /**
     * Creates new form NhapXuatManagerDialog
     */
    public ImAndExManagerDialog() {
        initComponents();
        tabs.setEnabled(false);
    }
public ImAndExManagerDialog(Frame owner, boolean modal) {
        super();
        initComponents();
        tabs.setEnabled(false);
        txtUserNK.setEnabled(false);
        txtUserXK.setEnabled(false);
        txtNhap.setEnabled(false);
        txtXuat.setEnabled(false);
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtUserNK = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNhap = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblChiTietNhapKho = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        lblidncc = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtTenNcc = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtSDT = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtDiaChi = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        lblidNK = new javax.swing.JLabel();
        btnReloadNhap = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtUserXK = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtXuat = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblChiTietXuatKho = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jButton21 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        lblidXK = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        btnReloadXuat = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Người tạo:");

        jLabel2.setText("Ngày nhập:");

        tblChiTietNhapKho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã đơn nhập", "Tên vật liệu", "Số lượng", "Tổng tiền", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblChiTietNhapKho.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblChiTietNhapKhoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblChiTietNhapKho);

        jLabel3.setText("Danh sách:");

        jLabel6.setText("Số điện thoại nhà cung cấp:");

        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jButton12.setText("Thêm nhà cung cấp");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jLabel12.setText("id nhà cung cấp:");

        lblidncc.setText("Chưa có nhà cung cấp");

        jLabel14.setText("Tên nhà cung cấp:");

        jLabel15.setText("Số điện thoại:");

        jLabel16.setText("Email:");

        jLabel17.setText("Địa chỉ:");

        jLabel7.setText("Tổng tiền:");

        jLabel4.setText("jLabel4");

        jButton1.setText("Lưu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Xóa");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton9.setText("Thêm vật liệu");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Xóa vật liệu");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton5.setText("Sửa thông tin");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel13.setText("Id đơn nhập:");

        lblidNK.setText("Chưa có đơn nhập.");

        btnReloadNhap.setText("reload");
        btnReloadNhap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadNhapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addGap(78, 78, 78))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblidNK))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblidncc))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSearch)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton5))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGap(43, 43, 43)
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(txtUserNK, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(txtNhap, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel16)
                                .addComponent(jLabel14))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtTenNcc, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                                .addComponent(txtEmail))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel15)
                                .addComponent(jLabel17))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtSDT)
                                .addComponent(txtDiaChi, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addComponent(btnReloadNhap))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(lblidNK))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUserNK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtNhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(jButton12)
                    .addComponent(jButton5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(lblidncc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtTenNcc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17)
                            .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addComponent(btnReloadNhap))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton9)
                    .addComponent(jButton10))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        tabs.addTab("Nhập", jPanel1);

        jLabel8.setText("Người tạo:");

        jLabel9.setText("Ngày xuất:");

        tblChiTietXuatKho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã đơn xuất", "Tên vật liệu", "Số lượng", "Tổng tiền", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblChiTietXuatKho.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblChiTietXuatKhoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblChiTietXuatKho);

        jLabel10.setText("Danh sách:");

        jButton21.setText("Lưu");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jButton23.setText("Xóa");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jButton29.setText("Thêm vật liệu");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        jButton30.setText("Xóa vật liệu");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        jLabel11.setText("Tổng tiền:");

        jLabel5.setText("jLabel5");

        jLabel18.setText("id đơn xuất:");

        lblidXK.setText("Chưa có đơn xuất.");

        jLabel19.setText("jLabel19");

        btnReloadXuat.setText("reload");
        btnReloadXuat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadXuatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtUserXK, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtXuat, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel18)
                                        .addGap(7, 7, 7)
                                        .addComponent(lblidXK)))
                                .addGap(0, 112, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnReloadXuat)
                                .addGap(16, 16, 16))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton30)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(84, 84, 84))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(lblidXK))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtUserXK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(txtXuat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(btnReloadXuat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel5)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton21)
                    .addComponent(jButton23)
                    .addComponent(jButton29)
                    .addComponent(jButton30))
                .addGap(21, 21, 21))
        );

        tabs.addTab("Xuất", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        this.testNhapKho();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        // TODO add your handling code here:
        this.testXuatKho();
    }//GEN-LAST:event_jButton29ActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        this.Search();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        this.themNhaCungCap();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        this.updateNhaCungCap();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void tblChiTietNhapKhoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblChiTietNhapKhoMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            this.updateQuantityNhapKho();
        }
    }//GEN-LAST:event_tblChiTietNhapKhoMouseClicked

    private void tblChiTietXuatKhoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblChiTietXuatKhoMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            this.updateQuantityXuatKho();
        }
    }//GEN-LAST:event_tblChiTietXuatKhoMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.updateNVLNhapKho();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.deleteNhapKho();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        this.removeNhapKho();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void btnReloadXuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadXuatActionPerformed
        // TODO add your handling code here:
        try {
            int donXuatId = Integer.parseInt(lblidXK.getText().trim());
            updateTongTienXuatKho(donXuatId);
            fillToTableXuatKho(donXuatId);
        } catch (NumberFormatException e) {
            XDialog.alert(this, "ID đơn xuất không hợp lệ.");
        }
    }//GEN-LAST:event_btnReloadXuatActionPerformed

    private void btnReloadNhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadNhapActionPerformed
        // TODO add your handling code here:
        try {
            int donNhapId = Integer.parseInt(lblidNK.getText().trim());
            updateTongTienNhapKho(donNhapId);
            fillToTableNhapKho(donNhapId);
        } catch (NumberFormatException e) {
            XDialog.alert(this, "ID đơn xuất không hợp lệ.");
        }
    }//GEN-LAST:event_btnReloadNhapActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        txtUserNK.setEditable(false);
        if (txtUserNK.getText().equals("")) {
        txtUserNK.setText(XAuth.getUserName());
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        // TODO add your handling code here:
        this.updateNVLXuatKho();
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // TODO add your handling code here:
        this.deleteXuatKho();
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        // TODO add your handling code here:
        this.removeXuatKho();
    }//GEN-LAST:event_jButton30ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImAndExManagerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImAndExManagerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImAndExManagerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImAndExManagerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImAndExManagerDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReloadNhap;
    private javax.swing.JButton btnReloadXuat;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblidNK;
    private javax.swing.JLabel lblidXK;
    private javax.swing.JLabel lblidncc;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblChiTietNhapKho;
    private javax.swing.JTable tblChiTietXuatKho;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNhap;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTenNcc;
    private javax.swing.JTextField txtUserNK;
    private javax.swing.JTextField txtUserXK;
    private javax.swing.JTextField txtXuat;
    // End of variables declaration//GEN-END:variables
    public void Search(){
        String sdt = txtSearch.getText().trim();
    if (sdt.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập số điện thoại nhà cung cấp cần tìm!");
        return;
    }

    Suppliers cc = daocc.findByPhone(sdt);
    if (cc != null) {
        nhaCungCapId = cc.getSupplierId();
        lblidncc.setText(String.valueOf(cc.getSupplierId()));
        txtTenNcc.setText(cc.getSupplierName());
        txtDiaChi.setText(String.valueOf(cc.getAddress()));
        txtEmail.setText(cc.getEmail());
        txtSDT.setText(cc.getPhoneNumber());
    } else {
        JOptionPane.showMessageDialog(this, "Không tìm thấy nhà cung cấp với số điện thoại: " + sdt);
        clearFormNhaCungCap();
    }
    }
    private void clearFormNhaCungCap() {
    txtTenNcc.setText("");
    txtDiaChi.setText("");
    txtEmail.setText("");
    txtSDT.setText("");
    lblidncc.setText("Chưa có nhà cung cấp");
}
    private void themNhaCungCap() {
    String ten = txtTenNcc.getText().trim();
    String diaChi = txtDiaChi.getText().trim();
    String email = txtEmail.getText().trim();
    String sdt = txtSDT.getText().trim();

    if (ten.isEmpty() || diaChi.isEmpty() || email.isEmpty() || sdt.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin nhà cung cấp!");
        return;
    }
        
    Suppliers cc = new Suppliers();
    cc.setSupplierName(ten);
    cc.setAddress(diaChi);
    cc.setEmail(email);
    cc.setPhoneNumber(sdt);

    try {
        daocc.create(cc);
        JOptionPane.showMessageDialog(this, "Thêm nhà cung cấp thành công!");
        clearFormNhaCungCap();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Lỗi khi thêm nhà cung cấp: " + e.getMessage());
        e.printStackTrace();
    }
}
    private void updateNhaCungCap() {
        String id = lblidncc.getText().trim(); // giả sử ID được hiển thị ở label lblidkh
        String ten = txtTenNcc.getText().trim();
        String diaChi = txtDiaChi.getText().trim();
        String email = txtEmail.getText().trim();
        String sdt = txtSDT.getText().trim();

        if (id.isEmpty() || ten.isEmpty() || diaChi.isEmpty() || email.isEmpty() || sdt.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin nhà cung cấp!");
            return;
        }

        int idd;
        try {
            idd = Integer.parseInt(id);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID khách hàng không hợp lệ!");
            return;
        }

        Suppliers ncc = new Suppliers();
        ncc.setSupplierId(idd);
        ncc.setSupplierName(ten);
        ncc.setAddress(diaChi);
        ncc.setEmail(email);
        ncc.setPhoneNumber(sdt);

        try {
            daocc.update(ncc);
            JOptionPane.showMessageDialog(this, "Cập nhật nhà cung cấp thành công!");
            clearFormNhaCungCap();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật nhà cung cấp: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    public void updateNVLNhapKho() {
        try{
    Import nk = getFormNhapKho();
    if (nk == null) {
        XDialog.alert(this, "Dữ liệu không hợp lệ!");
        return;
    }
    Import donNhapCu = daonk.findById(nk.getImportId());
    if (donNhapCu == null) {
        XDialog.alert(this, "Không tìm thấy đơn nhập!");
        return;
    }
    daonk.update(nk);
        XDialog.alert(this, "Cập nhật đơn hàng thành công!");
    } catch (Exception e) {
        e.printStackTrace();
        XDialog.alert(this, "Cập nhật đơn hàng thất bại!");
    }
    }
    public void updateNVLXuatKho() {
        try{
    Export xk = getFormXuatKho();
    if (xk == null) {
        XDialog.alert(this, "Dữ liệu không hợp lệ!");
        return;
    }
    Export donXuatCu = daoxk.findById(xk.getExportId());
    if (donXuatCu == null) {
        XDialog.alert(this, "Không tìm thấy đơn xuất!");
        return;
    }
    daoxk.update(xk);
        XDialog.alert(this, "Cập nhật đơn hàng thành công!");
    } catch (Exception e) {
        e.printStackTrace();
        XDialog.alert(this, "Cập nhật đơn hàng thất bại!");
    }
    }
    
    public void updateTongTienNhapKho(int importId) {
    List<ImportDetails> list = daoctnk.findByImportId(importId);
    double tongTien = 0.0;
    for (ImportDetails ct : list) {
        tongTien += ct.getTotalAmount();
    }
    jLabel4.setText(String.valueOf(tongTien));
    if (nk != null) {
        nk.setTotalAmount(tongTien);
    }
}
    public void updateTongTienXuatKho(int exportId) {
    List<ExportDetails> list = daoctxk.findByExportId(exportId);
    double tongTien = 0.0;
    for (ExportDetails ct : list) {
        tongTien += ct.getTotalAmount();
    }
    jLabel5.setText(String.valueOf(tongTien));
    if (xk != null) {
        xk.setTotalAmount(tongTien);
    }
}
    
    public void deleteNhapKho() {
    String idStr = lblidNK.getText().trim();

    if (idStr.isEmpty()) {
        XDialog.alert(this, "Không có đơn nhập nào được chọn để xóa!");
        return;
    }

    int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa đơn nhập này?", "Xác nhận", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) return;

    try {
        int importId = Integer.parseInt(idStr);


        // Xóa đơn hàng
        daonk.deleteById(importId);

        XDialog.alert(this, "Xóa đơn nhập thành công!");
        this.dispose();

    } catch (NumberFormatException e) {
        XDialog.alert(this, "ID đơn nhập không hợp lệ!");
    } catch (Exception e) {
        e.printStackTrace();
        XDialog.alert(this, "Xóa đơn nhập thất bại!");
    }
}
    public void deleteXuatKho() {
    String idStr = lblidXK.getText().trim();

    if (idStr.isEmpty()) {
        XDialog.alert(this, "Không có đơn xuất nào được chọn để xóa!");
        return;
    }

    int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa đơn xuất này?", "Xác nhận", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) return;

    try {
        int exportId = Integer.parseInt(idStr);


        // Xóa đơn hàng
        daonk.deleteById(exportId);

        XDialog.alert(this, "Xóa đơn xuất thành công!");
        this.dispose();

    } catch (NumberFormatException e) {
        XDialog.alert(this, "ID đơn xuất không hợp lệ!");
    } catch (Exception e) {
        e.printStackTrace();
        XDialog.alert(this, "Xóa đơn xuất thất bại!");
    }
}
    
    public void setFormNhapKho(Import nk) {
    this.nk = nk;
txtUserNK.setText(nk.getUserName() != null ? nk.getUserName() : "");

    // Gán mã đơn hàng
    if (nk.getImportId()!= null) {
        lblidNK.setText(String.valueOf(nk.getImportId()));
    } else {
        lblidNK.setText("N/A");
    }

    // Gán thông tin nhà cung cấp
    if (nk.getSupplier()!= null) {
        txtTenNcc.setText(nk.getSupplier().getSupplierName());
        nhaCungCapId = nk.getSupplier().getSupplierId();
        lblidncc.setText(String.valueOf(nk.getSupplier().getSupplierId()));

        txtSDT.setText(nk.getSupplier().getPhoneNumber());
        txtEmail.setText(nk.getSupplier().getEmail());
        txtDiaChi.setText(nk.getSupplier().getAddress());
    } else {
        txtTenNcc.setText("");
        lblidncc.setText("N/A");
        txtSDT.setText("");
        txtEmail.setText("");
        txtDiaChi.setText("");
        nhaCungCapId = -1;
    }

    // Tổng tiền
    jLabel4.setText(String.valueOf(nk.getTotalAmount()));

    // Ngày nhập
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        // Ngày đặt — nếu null thì tự fill ngày hiện tại
        Date ngayDat = nk.getImportDate();
        if (ngayDat == null) {
            ngayDat = new Date();
            nk.setImportDate(ngayDat);
        }
        txtNhap.setText(sdf.format(ngayDat));

    // Fill chi tiết đơn hàng
    if (nk.getImportId() != null) {
        this.fillToTableNhapKho(nk.getImportId());
    }
}
    public void setFormXuatKho(Export xk) {
    this.xk = xk;
    txtUserXK.setText(xk.getUserName() != null ? xk.getUserName() : "");

    // Gán mã đơn hàng
    if (xk.getExportId()!= null) {
        lblidXK.setText(String.valueOf(xk.getExportId()));
    } else {
        lblidXK.setText("N/A");
    }
    
    // Tổng tiền
    jLabel4.setText(String.valueOf(xk.getTotalAmount() != 0 ? xk.getTotalAmount() : 0));

    // Ngày xuất
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        // Ngày đặt — nếu null thì tự fill ngày hiện tại
        Date ngayDat = xk.getExportDate();
        if (ngayDat == null) {
            ngayDat = new Date();
            xk.setExportDate(ngayDat);
        }
        txtXuat.setText(sdf.format(ngayDat));

    // Fill chi tiết đơn hàng
    if (xk.getExportId() != null) {
        this.fillToTableXuatKho(xk.getExportId());
    }
}


    
    public Import getFormNhapKho() {
    Import nk = new Import();
    if (txtUserNK.getText().equals("")) {
        txtUserNK.setText(XAuth.getUserName());
        }
    nk.setUserName(txtUserNK.getText().trim());
    
    String idText = lblidncc.getText().trim();
if (!idText.isEmpty() && idText.matches("\\d+")) {
    nk.setSupplierId(Integer.parseInt(idText));
} else {
    nk.setSupplierId(null); // hoặc bỏ qua, báo lỗi chưa chọn NCC
}
    nk.setImportDate(new Date()); 
    // Tổng tiền
    try {
        nk.setTotalAmount(Double.parseDouble(jLabel4.getText().trim()));
    } catch (NumberFormatException e) {
        nk.setTotalAmount(0.0); // hoặc hiển thị cảnh báo nếu cần
    }

    // ID đơn hàng
    try {
        nk.setImportId(Integer.parseInt(lblidNK.getText().trim()));
    } catch (NumberFormatException e) {
        nk.setImportId(null);
    }

    return nk;
}
    public Export getFormXuatKho() {
    Export xk = new Export();
    if (txtUserXK.getText().equals("")) {
        txtUserXK.setText(XAuth.getUserName());
        }
    xk.setUserName(txtUserXK.getText().trim());
    xk.setExportDate(new Date());
    if (xk.getUserName().isEmpty()) {
        jLabel19.setForeground(Color.RED);
        jLabel19.setText("Vui lòng nhập Username!");
        return null;
    }
    
    try {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        // Ngày đặt
        String ngaXuatStr = txtNhap.getText().trim();
        if (!ngaXuatStr.isEmpty()) {
            xk.setExportDate(new Date()); // luôn lấy ngày hiện tại
        } else {
            jLabel19.setForeground(Color.RED);
        jLabel19.setText("Ngày nhập không được để trống!");
            return null;
        }
    } catch (NumberFormatException ex) {
        ex.printStackTrace();
        jLabel19.setForeground(Color.RED);
        jLabel19.setText("Lỗi xử lý ngày tháng!");
        return null;
    }
    // Tổng tiền
    try {
        xk.setTotalAmount(Double.parseDouble(jLabel5.getText().trim()));
    } catch (NumberFormatException e) {
        xk.setTotalAmount(0.0); // hoặc hiển thị cảnh báo nếu cần
    }

    // ID đơn hàng
    try {
        xk.setExportId(Integer.parseInt(lblidXK.getText().trim()));
    } catch (NumberFormatException e) {
        xk.setExportId(null);
    }
    
    return xk;
}
  
    public void fillToTableNhapKho(int importId) {
    DefaultTableModel model = (DefaultTableModel) tblChiTietNhapKho.getModel();
    model.setRowCount(0); // Xóa dữ liệu cũ

    List<ImportDetails> list = daoctnk.findByImportId(importId);

    for (ImportDetails ct : list) {
        Materials nvl = daonvl.findById(ct.getMaterialId());
        ct.setMaterial(nvl);

        Object[] row = {
            ct.getId(), // ✅ dùng ID chi tiết nhập kho
            nvl != null ? nvl.getMaterialName(): "Không tìm thấy",
            ct.getQuantity(),
            ct.getTotalAmount(),
            false // checkbox ban đầu là false
        };
        model.addRow(row);
    }

    // Ẩn cột ID (cột 0)
    tblChiTietNhapKho.getColumnModel().getColumn(0).setMinWidth(0);
    tblChiTietNhapKho.getColumnModel().getColumn(0).setMaxWidth(0);
    tblChiTietNhapKho.getColumnModel().getColumn(0).setWidth(0);
}
    public void fillToTableXuatKho(int exportId) {
    DefaultTableModel model = (DefaultTableModel) tblChiTietXuatKho.getModel();
    model.setRowCount(0); // Xóa dữ liệu cũ

    List<ExportDetails> list = daoctxk.findByExportId(exportId);

    for (ExportDetails ct : list) {
        Materials nvl = daonvl.findById(ct.getMaterialId());
        ct.setMaterial(nvl);

        Object[] row = {
            ct.getId(), // ✅ dùng ID chi tiết nhập kho
            nvl != null ? nvl.getMaterialName() : "Không tìm thấy",
            ct.getQuantity(),
            ct.getTotalAmount(),
            false // checkbox ban đầu là false
        };
        model.addRow(row);
    }

    // Ẩn cột ID (cột 0)
    tblChiTietXuatKho.getColumnModel().getColumn(0).setMinWidth(0);
    tblChiTietXuatKho.getColumnModel().getColumn(0).setMaxWidth(0);
    tblChiTietXuatKho.getColumnModel().getColumn(0).setWidth(0);
}
    
    public void removeNhapKho() {
    for (int i = 0; i < tblChiTietNhapKho.getRowCount(); i++) {
        Boolean checked = (Boolean) tblChiTietNhapKho.getValueAt(i, 4); // cột checkbox
        if (Boolean.TRUE.equals(checked)) {
            int ctId = (int) tblChiTietNhapKho.getValueAt(i, 0); // lấy ID chi tiết
            ImportDetails ct = daoctnk.findById(ctId);
            if (ct != null) {
                daoctnk.deleteById(ct.getId());
            } else {
                JOptionPane.showMessageDialog(this, "Chi tiết nhập kho không tồn tại!");
            }
        }
    }
    fillToTableNhapKho(nk.getImportId());
}
    public void removeXuatKho() {
    for (int i = 0; i < tblChiTietXuatKho.getRowCount(); i++) {
        Boolean checked = (Boolean) tblChiTietXuatKho.getValueAt(i, 4); // cột checkbox
        if (Boolean.TRUE.equals(checked)) {
            int ctId = (int) tblChiTietXuatKho.getValueAt(i, 0); // lấy ID chi tiết
            ExportDetails ct = daoctxk.findById(ctId);
            if (ct != null) {
                daoctxk.deleteById(ct.getId());
            } else {
                JOptionPane.showMessageDialog(this, "Chi tiết xuất kho không tồn tại!");
            }
        }
    }
    fillToTableXuatKho(xk.getExportId());
}

    public void updateQuantityNhapKho() {
   
    int selectedRow = tblChiTietNhapKho.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để cập nhật số lượng!");
        return;
    }

    String input = JOptionPane.showInputDialog(this, "Số lượng mới:");
    if (input == null || input.trim().isEmpty()) return; // Bấm Cancel hoặc không nhập gì

    try {
        int newQuantity = Integer.parseInt(input.trim());
        if (newQuantity <= 0) {
            JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!");
            return;
        }

        // Lấy ID của chi tiết đơn hàng
        int ctId = (int) tblChiTietNhapKho.getValueAt(selectedRow, 0);
        ImportDetails ct = daoctnk.findById(ctId);

        if (ct == null) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy chi tiết đơn hàng tương ứng!");
            return;
        }

        Materials nvl = ct.getMaterial(); // Lấy thông tin sản phẩm để biết đơn giá
        if (nvl == null) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy sản phẩm tương ứng!");
            return;
        }

        // Cập nhật số lượng và tổng tiền
        ct.setQuantity(newQuantity);
        ct.setTotalAmount(newQuantity * nvl.getUnitPrice());
        daoctnk.update(ct);

        fillToTableNhapKho(nk.getImportId()); // Refresh lại bảng

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập số hợp lệ!");
    }
}
    public void updateQuantityXuatKho() {
    int selectedRow = tblChiTietXuatKho.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để cập nhật số lượng!");
        return;
    }

    String input = JOptionPane.showInputDialog(this, "Số lượng mới:");
    if (input == null || input.trim().isEmpty()) return; // Bấm Cancel hoặc không nhập gì

    try {
        int newQuantity = Integer.parseInt(input.trim());
        if (newQuantity <= 0) {
            JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!");
            return;
        }

        // Lấy ID của chi tiết xuất kho
        int ctId = (int) tblChiTietXuatKho.getValueAt(selectedRow, 0);
        ExportDetails ct = daoctxk.findById(ctId);

        if (ct == null) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy chi tiết xuất kho tương ứng!");
            return;
        }

        Materials nvl = ct.getMaterial();
        if (nvl == null) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy sản phẩm tương ứng!");
            return;
        }

        // Cập nhật số lượng và tổng tiền
        ct.setQuantity(newQuantity);
        ct.setTotalAmount(newQuantity * nvl.getUnitPrice());
        daoctxk.update(ct);

        // ✅ Refresh lại bảng Xuất kho
        if (xk != null && xk.getExportId() != null) {
            fillToTableXuatKho(xk.getExportId());
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập số hợp lệ!");
    }
}

    
    public void testNhapKho() {
    try {
        Import donNhapDangChon = null;

        // Lấy ID từ label
        String idStr = lblidNK.getText().trim();
        if (!idStr.isEmpty()) {
            try {
                int donNhapId = Integer.parseInt(idStr);
                donNhapDangChon = daonk.findById(donNhapId);
            } catch (NumberFormatException e) {
                XDialog.alert(this, "ID đơn nhập không hợp lệ!");
                return;
            }
        }

        // Nếu không tìm thấy đơn hàng => Tạo mới
        if (donNhapDangChon == null) {
            boolean confirm = XDialog.confirm("Không tìm thấy đơn nhập. Bạn có muốn tạo mới nhập?");
            if (!confirm) return;

            Import donNhapMoi = getFormNhapKho();
            if (donNhapMoi == null) {
                XDialog.alert(this, "Vui lòng điền đầy đủ thông tin đơn nhập.");
                return;
            }

            int idMoi = daonk.insertAndReturnId(donNhapMoi);
            if (idMoi == -1) {
                XDialog.alert(this, "Tạo đơn nhập thất bại!");
                return;
            }

            donNhapDangChon = daonk.findById(idMoi);
            lblidNK.setText(String.valueOf(idMoi));
        }

        // Mở dialog quản lý kho
        KhoManagerJDialog dialog = new KhoManagerJDialog(this, true, donNhapDangChon, "NHAPKHO");
        dialog.setVisible(true);

        // Fill lại bảng
        fillToTableNhapKho(donNhapDangChon.getImportId());

    } catch (Exception ex) {
        ex.printStackTrace();
        XDialog.alert(this, "Đã xảy ra lỗi khi xử lý đơn nhập.");
    }
}

    public void testXuatKho() {
        try {
            Export donXuatDangChon = null;

            // Lấy ID từ label
            String idStr = lblidXK.getText().trim();

            if (!idStr.isEmpty()) {
                try {
                    int donXuatId = Integer.parseInt(idStr);
                    donXuatDangChon = daoxk.findById(donXuatId);
                } catch (NumberFormatException e) {
                    XDialog.alert(this, "ID đơn xuất không hợp lệ!");
                    return;
                }
            }

            // Nếu không tìm thấy đơn hàng => Tạo mới
            if (donXuatDangChon == null) {
                boolean confirm = XDialog.confirm("Không tìm thấy đơn xuất. Bạn có muốn tạo mới không?");
                if (!confirm) {
                    return;
                }

                Export donXuatMoi = getFormXuatKho(); // <-- Tạo từ dữ liệu nhập trên form
                if (donXuatMoi == null) {
                    XDialog.alert(this, "Vui lòng điền đầy đủ thông tin đơn xuất.");
                    return;
                }

                int idMoi = daoxk.insertAndReturnId(donXuatMoi);
                if (idMoi == -1) {
                    XDialog.alert(this, "Tạo đơn xuất thất bại!");
                    return;
                }

                donXuatDangChon = daoxk.findById(idMoi); // Lấy lại đơn hàng vừa tạo
                lblidXK.setText(String.valueOf(idMoi)); // Cập nhật lên form
            }

            // Mở dialog quản lý kho
            KhoManagerJDialog dialog = new KhoManagerJDialog(this, true, donXuatDangChon, "XUATKHO");
            dialog.setVisible(true);

        } catch (Exception ex) {
            ex.printStackTrace();
            XDialog.alert(this, "Đã xảy ra lỗi khi xử lý đơn xuất.");
        }
        fillToTableXuatKho(xk.getExportId());
        try {
            int donHangId = Integer.parseInt(lblidXK.getText().trim());
            fillToTableXuatKho(donHangId);
        } catch (NumberFormatException e) {
            XDialog.alert(this, "ID đơn xuất không hợp lệ.");
        }
    }

}

