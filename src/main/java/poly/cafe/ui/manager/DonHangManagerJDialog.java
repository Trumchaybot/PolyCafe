/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package poly.cafe.ui.manager;

import java.awt.Frame;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import poly.cafe.dao.impl.OrderDetailsDAOImpl;
import poly.cafe.dao.impl.OrdersDAOImpl;
import poly.cafe.dao.impl.CustomersDAOImpl;
import poly.cafe.dao.impl.ProductsDAOImpl;
import poly.cafe.entity.OrderDetails;
import poly.cafe.entity.Orders;
import poly.cafe.entity.Customers;
import poly.cafe.entity.Products;
import poly.cafe.ui.manager.controller.DonHangManagerController;
import poly.cafe.util.XDate;
import poly.cafe.util.XDialog;
import poly.cafe.dao.CustomersDAO;
import poly.cafe.dao.OrderDetailsDAO;
import poly.cafe.dao.OrdersDAO;
import poly.cafe.dao.ProductsDAO;

/**
 *
 * @author admin
 */
public class DonHangManagerJDialog extends javax.swing.JFrame implements DonHangManagerController {

    private int customerId = -1; // -1: chưa có khách hàng
    Orders dh = new Orders();
    Customers kh = new Customers();
    OrdersDAO daodh = new OrdersDAOImpl();
    CustomersDAO daokh = new CustomersDAOImpl();
    OrderDetailsDAO daoChiTiet = new OrderDetailsDAOImpl();
    ProductsDAO daosp = new ProductsDAOImpl();
    private Orders bill;
    private int currentDonHangId;

    public void setBill(Orders bill) {
        this.bill = bill;
    }

    public void setCustomer(int id, String name) {
        this.customerId = id;
        txtSearch.setText(name);
        if (bill != null) {
            bill.setCustomerid(id);
        }
    }

    public int getCustomerId() {
        return customerId;
    }

    public void setDonHangId(int id) {
        this.currentDonHangId = id;
        lbliddh.setText(String.valueOf(id));  // Gán lên label
    }

    /**
     * Creates new form DonHangManagerJDialog
     */
    public DonHangManagerJDialog() {
        initComponents();
    }

    public DonHangManagerJDialog(Frame owner, boolean modal) {
        super();
        initComponents();
        txtTong.setEnabled(false);
        txtDat.setEnabled(false);
        txtGiao.setEnabled(false);
        rdoXuLy.setSelected(true);
        this.bill = bill;
        if (bill != null) {
            fillToTable(bill.getCustomerid());
            setForm(bill);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        lbliddh = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblChiTiet = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        txtDat = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtGiao = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTong = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDiaChi = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        rdoXuLy = new javax.swing.JRadioButton();
        rdoGiao = new javax.swing.JRadioButton();
        rdoCancel = new javax.swing.JRadioButton();
        btnSave = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtTen = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtSDT = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtNamSinh = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        lblidkh = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        btnReload = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Mã đơn hàng:");

        lbliddh.setText("Chưa có đơn hàng");

        jLabel3.setText("Số điện thoại khách hàng:");

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        tblChiTiet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã đơn hàng", "Tên sản phẩm", "Số lượng", "Tổng tiền", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblChiTiet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblChiTietMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblChiTiet);

        jLabel4.setText("Ngày đặt:");

        jLabel5.setText("Ngày giao:");

        jLabel6.setText("Tổng tiền:");

        txtTong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTongActionPerformed(evt);
            }
        });

        jLabel7.setText("Địa chỉ:");

        txtDiaChi.setColumns(20);
        txtDiaChi.setRows(5);
        jScrollPane2.setViewportView(txtDiaChi);

        jLabel8.setText("Trạng thái:");

        buttonGroup1.add(rdoXuLy);
        rdoXuLy.setText("Đang xử lý");
        rdoXuLy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoXuLyActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdoGiao);
        rdoGiao.setText("Đã giao");
        rdoGiao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoGiaoActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdoCancel);
        rdoCancel.setText("Đã hủy");

        btnSave.setText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jButton3.setText("Xóa");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Tìm kiếm");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Thêm sản phẩm");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Xóa sản phẩm");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel9.setText("Tên khách hàng:");

        jLabel10.setText("Số điện thoại:");

        jLabel11.setText("Năm sinh:");

        jLabel12.setText("Email:");

        jButton8.setText("Thêm khách hàng mới");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel13.setText("id khách hàng:");

        lblidkh.setText("Chưa có khách hàng");

        jButton9.setText("Sửa thông tin ");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        btnReload.setText("RELOAD");
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTong, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSave)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton6)
                                .addGap(9, 9, 9))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblidkh)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel7))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(txtTen)
                                                        .addComponent(txtNamSinh, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(txtDat, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel10)
                                                    .addComponent(jLabel12)
                                                    .addComponent(jLabel5))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtSDT)
                                                    .addComponent(txtEmail)
                                                    .addComponent(txtGiao, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(jScrollPane2))
                                        .addGap(90, 90, 90)
                                        .addComponent(btnReload)
                                        .addGap(11, 11, 11))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rdoXuLy)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rdoGiao)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(rdoCancel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbliddh, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton5)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton8)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton9)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lbliddh)
                    .addComponent(jLabel3)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)
                    .addComponent(jButton8)
                    .addComponent(jButton9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(lblidkh))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNamSinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtDat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtGiao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnReload)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(rdoXuLy)
                    .addComponent(rdoGiao)
                    .addComponent(rdoCancel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(jButton3)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        this.timKiemCustomerTheoSDT();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void tblChiTietMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblChiTietMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            this.updateQuantity();
        }
    }//GEN-LAST:event_tblChiTietMouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        //  this.showKhoAndAddToDonHang();
        this.test();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        this.themCustomer();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:\\
        this.updateCustomer();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        // TODO add your handling code here:
        try {
            int donHangId = Integer.parseInt(lbliddh.getText().trim());
            updateTongTien(donHangId);
            fillToTable(donHangId);
        } catch (NumberFormatException e) {
            XDialog.alert(this, "ID đơn hàng không hợp lệ.");
        }
    }//GEN-LAST:event_btnReloadActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        this.removeSanPham();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void rdoGiaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoGiaoActionPerformed
        // TODO add your handling code here:
        if (rdoGiao.isSelected()) {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            txtGiao.setText(sdf.format(new Date()));
        }
    }//GEN-LAST:event_rdoGiaoActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        this.update();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtTongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTongActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTongActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.delete();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void rdoXuLyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoXuLyActionPerformed
        // TODO add your handling code here:
        if (rdoXuLy.isSelected()) {
            txtGiao.setText("");
        }
    }//GEN-LAST:event_rdoXuLyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DonHangManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DonHangManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DonHangManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DonHangManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DonHangManagerJDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReload;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbliddh;
    private javax.swing.JLabel lblidkh;
    private javax.swing.JRadioButton rdoCancel;
    private javax.swing.JRadioButton rdoGiao;
    private javax.swing.JRadioButton rdoXuLy;
    private javax.swing.JTable tblChiTiet;
    private javax.swing.JTextField txtDat;
    private javax.swing.JTextArea txtDiaChi;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtGiao;
    private javax.swing.JTextField txtNamSinh;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTen;
    private javax.swing.JTextField txtTong;
    // End of variables declaration//GEN-END:variables

    public void setForm(Orders dh) {
        if (dh == null) {
            JOptionPane.showMessageDialog(this, "Không có dữ liệu đơn hàng để hiển thị!");
            return;
        }

        // Gán ID đơn hàng
        lbliddh.setText(dh.getOrderId() != null ? dh.getOrderId().toString() : "");

        // Gán thông tin khách hàng
        if (dh.getCustomer() != null) {
            Customers c = dh.getCustomer();
            lblidkh.setText(String.valueOf(c.getCustomerId()));
            txtTen.setText(c.getCustomerName() != null ? c.getCustomerName() : "");
            txtSDT.setText(c.getPhoneNumber() != null ? c.getPhoneNumber() : "");
            txtEmail.setText(c.getEmail() != null ? c.getEmail() : "");

            if (c.getBirthDate() != null) {
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                txtNamSinh.setText(sdf.format(c.getBirthDate()));
            } else {
                txtNamSinh.setText("");
            }
        } else {
            lblidkh.setText("0");
            txtTen.setText("");
            txtSDT.setText("");
            txtEmail.setText("");
            txtNamSinh.setText("");
        }

        // Định dạng ngày
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        // Ngày đặt — nếu null thì tự fill ngày hiện tại
        Date ngayDat = dh.getOrderDate();
        if (ngayDat == null) {
            ngayDat = new Date();
            dh.setOrderDate(ngayDat);
        }
        txtDat.setText(sdf.format(ngayDat));

        // Ngày giao — có thể null
        if (dh.getDeliveryDate() != null) {
            txtGiao.setText(sdf.format(dh.getDeliveryDate()));
        } else {
            txtGiao.setText("");
        }

        // Địa chỉ
        txtDiaChi.setText(dh.getAddress() != null ? dh.getAddress() : "");

        // Tổng tiền
        try {
            dh.setTotalAmount(Double.parseDouble(txtTong.getText().trim()));
        } catch (NumberFormatException e) {
            dh.setTotalAmount(0.0);
        }

        // Trạng thái
        String status = dh.getStatus();
        if ("Đang xử lý".equalsIgnoreCase(status)) {
            rdoXuLy.setSelected(true);
        } else if ("Đã giao".equalsIgnoreCase(status)) {
            rdoGiao.setSelected(true);
        } else if ("Đã hủy".equalsIgnoreCase(status)) {
            rdoCancel.setSelected(true);
        } else {
            buttonGroup1.clearSelection();
        }
    }

    public Orders getForm() {
        Orders dh = new Orders();

        // Lấy customerId từ lblidkh
        int customerId;
        try {
            customerId = Integer.parseInt(lblidkh.getText().trim());
        } catch (NumberFormatException e) {
            customerId = -1;
        }

        // Kiểm tra khách hàng
        if (customerId <= 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn khách hàng!");
            return null;
        }

        Customers kh = new Customers();
        kh.setCustomerId(customerId);
        dh.setCustomer(kh);

        try {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

            // Ngày đặt
            String ngayDatStr = txtDat.getText().trim();
            if (!ngayDatStr.isEmpty()) {
                dh.setOrderDate(sdf.parse(ngayDatStr));
            } else {
                JOptionPane.showMessageDialog(this, "Ngày đặt không được để trống!");
                return null;
            }

            // Ngày giao
            String ngayGiaoStr = txtGiao.getText().trim();
            if (rdoGiao.isSelected()) {
                dh.setDeliveryDate(new Date());
                txtGiao.setText(sdf.format(dh.getDeliveryDate()));
            } else if (!ngayGiaoStr.isEmpty()) {
                try {
                    dh.setDeliveryDate(sdf.parse(ngayGiaoStr));
                } catch (ParseException e) {
                    JOptionPane.showMessageDialog(this, "Ngày giao không đúng định dạng dd/MM/yyyy!");
                    return null;
                }
            } else {
                dh.setDeliveryDate(null);
            }

        } catch (ParseException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi xử lý ngày tháng!");
            return null;
        }

        // Địa chỉ
        if (txtDiaChi == null || txtDiaChi.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập địa chỉ giao hàng!");
            return null;
        } else {
            dh.setAddress(txtDiaChi.getText().trim());
        }

        // Tổng tiền
        try {
            dh.setTotalAmount(Double.parseDouble(txtTong.getText().trim()));
        } catch (NumberFormatException e) {
            dh.setTotalAmount(0.0);
        }

        // Trạng thái
        if (rdoXuLy.isSelected()) {
            dh.setStatus("Đang xử lý");
        } else if (rdoGiao.isSelected()) {
            dh.setStatus("Đã giao");
        } else if (rdoCancel.isSelected()) {
            dh.setStatus("Đã hủy");
        } else {
            dh.setStatus("Đang xử lý");
        }

        // ID đơn hàng
        try {
            dh.setOrderId(Integer.parseInt(lbliddh.getText().trim()));
        } catch (NumberFormatException e) {
            dh.setOrderId(null);
        }

        return dh;
    }

    public void fillToTable(int donHangId) {
        DefaultTableModel model = (DefaultTableModel) tblChiTiet.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ

        List<OrderDetails> list = daoChiTiet.findByOrderId(donHangId);

        for (OrderDetails ct : list) {
            Products sp = daosp.findById(ct.getProductId());
            ct.setProduct(sp);

            Object[] row = {
                ct.getOrderId(),
                sp != null ? sp.getProductName() : "Không tìm thấy",
                ct.getQuantity(),
                ct.getTotalAmount(),
                false // checkbox ban đầu là false
            };
            model.addRow(row);
        }
    }

    @Override
    public void edit() {

    }

    public void removeSanPham() {
        for (int i = 0; i < tblChiTiet.getRowCount(); i++) {
            Boolean checked = (Boolean) tblChiTiet.getValueAt(i, 4); // cột checkbox
            if (Boolean.TRUE.equals(checked)) {
                OrderDetails ct = daoChiTiet.findById((int) tblChiTiet.getValueAt(i, 0)); // cột ID
                daoChiTiet.deleteById(ct.getId());
            }
        }
        fillToTable(dh.getOrderId());
    }

    public void updateQuantity() {
        // Kiểm tra trạng thái đơn hàng
        if (!"Đang xử lý".equals(dh.getStatus())) {
            JOptionPane.showMessageDialog(this, "Chỉ có thể sửa khi đơn hàng đang ở trạng thái 'Đang xử lý'.");
            return;
        }

        int selectedRow = tblChiTiet.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để cập nhật số lượng!");
            return;
        }

        String input = JOptionPane.showInputDialog(this, "Số lượng mới:");
        if (input == null || input.trim().isEmpty()) {
            return; // Bấm Cancel hoặc không nhập gì
        }
        try {
            int newQuantity = Integer.parseInt(input.trim());
            if (newQuantity <= 0) {
                JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!");
                return;
            }

            // Lấy ID của chi tiết đơn hàng
            int ctId = (int) tblChiTiet.getValueAt(selectedRow, 0);
            OrderDetails ct = daoChiTiet.findById(ctId);

            if (ct == null) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy chi tiết đơn hàng tương ứng!");
                return;
            }

            Products sp = ct.getProduct(); // Lấy thông tin sản phẩm để biết đơn giá
            if (sp == null) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy sản phẩm tương ứng!");
                return;
            }

            // Cập nhật số lượng và tổng tiền
            ct.setQuantity(newQuantity);
            ct.setTotalAmount(newQuantity * sp.getUnitPrice());
            daoChiTiet.update(ct);

            fillToTable(dh.getOrderId()); // Refresh lại bảng

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số hợp lệ!");
        }
    }

    private void showKhoAndAddToDonHang() {
        KhoManagerJDialog dialog = new KhoManagerJDialog((Frame) this.getOwner(), true);
        dialog.setVisible(true);

        List<Products> selectedProducts = dialog.getSelectedProductsItems();
        if (selectedProducts != null && !selectedProducts.isEmpty()) {
            for (Products product : selectedProducts) {
                // Hỏi số lượng cần thêm cho mỗi nguyên vật liệu
                String quantityStr = XDialog.prompt("Nhập số lượng cho sản phẩm: " + product.getProductId());
                if (quantityStr == null || quantityStr.trim().isEmpty()) {
                    continue;
                }

                try {
                    int quantity = Integer.parseInt(quantityStr);
                    if (quantity <= 0) {
                        XDialog.alert(this, "Số lượng phải lớn hơn 0!");
                        continue;
                    }
                    if (quantity > product.getQuantity()) {
                        XDialog.alert(this, "Không đủ số lượng trong kho cho sản phẩm: " + product.getProductId());
                        continue;
                    }

                    // Tạo ChiTietDonHang
                    OrderDetails ct = new OrderDetails();
                    ct.setOrderId(dh.getOrderId());
                    ct.setProductId(product.getProductId());
                    ct.setQuantity(quantity);
                    ct.setTotalAmount(product.getUnitPrice() * quantity);

                    // Thêm vào DB
                    daoChiTiet.create(ct);

                    // Cập nhật lại kho
                    product.setQuantity(product.getQuantity() - quantity);
                    new ProductsDAOImpl().updateKho(product);

                } catch (NumberFormatException e) {
                    XDialog.alert(this, "Số lượng không hợp lệ cho sản phẩm: " + product.getProductId());
                }
            }
            fillToTable(dh.getOrderId());
        }
    }

    public void test() {
        try {
            OrdersDAO donHangDAO = new OrdersDAOImpl();
            Orders donHangDangChon = null;

            // Lấy ID từ label
            String idStr = lbliddh.getText().trim();

            if (!idStr.isEmpty()) {
                try {
                    int donHangId = Integer.parseInt(idStr);
                    donHangDangChon = donHangDAO.findById(donHangId);
                } catch (NumberFormatException e) {
                    XDialog.alert(this, "ID đơn hàng không hợp lệ!");
                    return;
                }
            }

            // Nếu không tìm thấy đơn hàng => Tạo mới
            if (donHangDangChon == null) {
                boolean confirm = XDialog.confirm("Không tìm thấy đơn hàng. Bạn có muốn tạo mới không?");
                if (!confirm) {
                    return;
                }

                Orders donHangMoi = getForm(); // <-- Tạo từ dữ liệu nhập trên form
                if (donHangMoi == null) {
                    XDialog.alert(this, "Vui lòng điền đầy đủ thông tin đơn hàng.");
                    return;
                }

                int idMoi = donHangDAO.insertAndReturnId(donHangMoi);
                if (idMoi == -1) {
                    XDialog.alert(this, "Tạo đơn hàng thất bại!");
                    return;
                }

                donHangDangChon = donHangDAO.findById(idMoi); // Lấy lại đơn hàng vừa tạo
                lbliddh.setText(String.valueOf(idMoi)); // Cập nhật lên form
            }

            // Mở dialog quản lý kho
            KhoManagerJDialog dialog = new KhoManagerJDialog(this, true, donHangDangChon);
            dialog.setVisible(true);

            // Sau khi đóng dialog -> fill lại bảng với đơn hàng hiện tại
            fillToTable(donHangDangChon.getOrderId());

        } catch (Exception ex) {
            ex.printStackTrace();
            XDialog.alert(this, "Đã xảy ra lỗi khi xử lý đơn hàng.");
        }
    }

    private void timKiemCustomerTheoSDT() {
        String sdt = txtSearch.getText().trim();
        if (sdt.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số điện thoại khách hàng cần tìm!");
            return;
        }

        Customers kh = daokh.findByPhone(sdt);
        if (kh != null) {
            lblidkh.setText(String.valueOf(kh.getCustomerId()));
            txtTen.setText(kh.getCustomerName());
            txtNamSinh.setText(String.valueOf(kh.getBirthDate()));
            txtEmail.setText(kh.getEmail());
            txtSDT.setText(kh.getPhoneNumber());
        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy khách hàng với số điện thoại: " + sdt);
            clearFormCustomer();
        }
    }

    private void clearFormCustomer() {
        txtTen.setText("");
        txtNamSinh.setText("");
        txtEmail.setText("");
        txtSDT.setText("");
        lblidkh.setText("Chưa có khách hàng");
    }

    private void themCustomer() {
        String ten = txtTen.getText().trim();
        String namSinhStr = txtNamSinh.getText().trim();
        String email = txtEmail.getText().trim();
        String sdt = txtSDT.getText().trim();

        if (ten.isEmpty() || namSinhStr.isEmpty() || email.isEmpty() || sdt.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin khách hàng!");
            return;
        }

        // Chuyển String -> Date
        Date namSinh;
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy"); // hoặc "yyyy-MM-dd" nếu bạn dùng định dạng khác
            namSinh = sdf.parse(namSinhStr);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Định dạng ngày sinh không hợp lệ (ví dụ: 01/01/2000)!");
            return;
        }

        Customers kh = new Customers();
        kh.setCustomerName(ten);
        kh.setBirthDate(namSinh);
        kh.setEmail(email);
        kh.setPhoneNumber(sdt);

        try {
            daokh.create(kh);
            JOptionPane.showMessageDialog(this, "Thêm khách hàng thành công!");
            clearFormCustomer();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm khách hàng: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void updateCustomer() {
        String idStr = lblidkh.getText().trim(); // giả sử ID được hiển thị ở label lblidkh
        String ten = txtTen.getText().trim();
        String namSinhStr = txtNamSinh.getText().trim();
        String email = txtEmail.getText().trim();
        String sdt = txtSDT.getText().trim();

        if (idStr.isEmpty() || ten.isEmpty() || namSinhStr.isEmpty() || email.isEmpty() || sdt.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin khách hàng!");
            return;
        }

        int id;
        try {
            id = Integer.parseInt(idStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID khách hàng không hợp lệ!");
            return;
        }

        Date namSinh;
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy"); // hoặc "yyyy-MM-dd" tùy định dạng
            namSinh = sdf.parse(namSinhStr);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ngày sinh không hợp lệ (ví dụ: 01/01/2000)!");
            return;
        }

        Customers kh = new Customers();
        kh.setCustomerId(id);
        kh.setCustomerName(ten);
        kh.setBirthDate(namSinh);
        kh.setEmail(email);
        kh.setPhoneNumber(sdt);

        try {
            daokh.update(kh);
            JOptionPane.showMessageDialog(this, "Cập nhật khách hàng thành công!");
            clearFormCustomer();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật khách hàng: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void update() {
        Orders dh = getForm();
        if (dh == null) {
            XDialog.alert(this, "Dữ liệu không hợp lệ!");
            return;
        }

        // Kiểm tra trạng thái đơn hiện tại từ CSDL (để tránh sửa từ UI)
        Orders donHangCu = daodh.findById(dh.getOrderId());
        if (donHangCu == null) {
            XDialog.alert(this, "Không tìm thấy đơn hàng!");
            return;
        }

        // Nếu đơn hàng đã giao thì không cho cập nhật nữa
        if ("Đã giao".equals(donHangCu.getStatus())) {
            XDialog.alert(this, "Không thể cập nhật đơn hàng đã giao!");
            return;
        }

        if ("Đã hủy".equals(donHangCu.getStatus())) {
            XDialog.alert(this, "Không thể cập nhật đơn hàng đã hủy!");
            return;
        }

        try {
            // Nếu trạng thái mới là "Đã giao" mà chưa có ngày giao, set ngày giao là hôm nay
            if ("Đã giao".equals(dh.getStatus()) && dh.getDeliveryDate() == null) {
                dh.setDeliveryDate(new Date()); // Gán ngày giao là hiện tại
            }

            daodh.update(dh);
            XDialog.alert(this, "Cập nhật đơn hàng thành công!");
        } catch (Exception e) {
            e.printStackTrace();
            XDialog.alert(this, "Cập nhật đơn hàng thất bại!");
        }
    }

    public void updateTongTien(int donHangId) {
        List<OrderDetails> list = daoChiTiet.findByOrderId(donHangId);
        double total = 0.0;
        for (OrderDetails ct : list) {
            total += ct.getTotalAmount();
        }
        txtTong.setText(String.valueOf(total));
        if (dh != null) {
            dh.setTotalAmount(total);
        }
    }

    public void delete() {
        String idStr = lbliddh.getText().trim();

        if (idStr.isEmpty()) {
            XDialog.alert(this, "Không có đơn hàng nào được chọn để xóa!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa đơn hàng này?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            int donHangId = Integer.parseInt(idStr);

            // Xóa đơn hàng
            daodh.deleteById(donHangId);

            XDialog.alert(this, "Xóa đơn hàng thành công!");
            this.dispose();

        } catch (NumberFormatException e) {
            XDialog.alert(this, "ID đơn hàng không hợp lệ!");
        } catch (Exception e) {
            e.printStackTrace();
            XDialog.alert(this, "Xóa đơn hàng thất bại!");
        }
    }
}
