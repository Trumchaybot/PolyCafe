/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package poly.cafe.ui.component;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.sql.ResultSet;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JTable;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import poly.cafe.dao.impl.TotalExpensesDAOImpl;
import poly.cafe.dao.impl.TotalRevenueDAOImpl;
import poly.cafe.entity.TotalExpenses;
import poly.cafe.entity.TotalRevenue;
import poly.cafe.ui.component.controller.ThongKeDoanhThuController;
import poly.cafe.util.XJdbc;
import poly.cafe.dao.TotalExpensesDAO;
import poly.cafe.dao.TotalRevenueDAO;

/**
 *
 * @author admin
 */
public class ThongKeDoanhThu extends javax.swing.JPanel implements ThongKeDoanhThuController{
TotalRevenueDAO daott = new TotalRevenueDAOImpl();
    TotalExpensesDAO daotc = new TotalExpensesDAOImpl();
    /**
     * Creates new form TKDTJdialog
     */
    public ThongKeDoanhThu() {
        initComponents();
        this.open();
        this.Front();
    }

    public void Front(){
        jPanel1.setBackground(new Color(255,255,200));
        jPanel2.setBackground(new Color(255,255,200));
        jPanel3.setBackground(new Color(255,255,200));
        jButton1.setBackground(new Color(255,255,200));
        jButton2.setBackground(new Color(255,255,200));
        cboThangChi.setBackground(new Color(255, 255, 230));
        cboNamChi.setBackground(new Color(255, 255, 230));
        cboThangThu.setBackground(new Color(255, 255, 230));
        cboNamThu.setBackground(new Color(255, 255, 230));
        jScrollPane1.getViewport().setBackground(new Color(255, 255, 230));
        jScrollPane2.getViewport().setBackground(new Color(255, 255, 230));
        tblTongChi.setSelectionBackground(new Color(255, 255, 230)); // cùng màu nền bạn set
tblTongChi.setSelectionForeground(Color.BLACK);   
        JTableHeader header = tblTongChi.getTableHeader();
header.setDefaultRenderer(new DefaultTableCellRenderer() {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {

        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

        c.setBackground(new Color(255, 255, 230)); // Màu be nhạt
        c.setFont(new Font("Segoe UI", Font.BOLD, 14)); // Font đậm
        setHorizontalAlignment(CENTER);            // Canh giữa chữ

        return c;
    }
});
tblTongThu.setSelectionBackground(new Color(255, 255, 230)); // cùng màu nền bạn set
tblTongThu.setSelectionForeground(Color.BLACK);   
        JTableHeader headerr = tblTongThu.getTableHeader();
headerr.setDefaultRenderer(new DefaultTableCellRenderer() {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {

        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

        c.setBackground(new Color(255, 255, 230)); // Màu be nhạt
        c.setFont(new Font("Segoe UI", Font.BOLD, 14)); // Font đậm
        setHorizontalAlignment(CENTER);            // Canh giữa chữ

        return c;
    }
});
jTabbedPane1.setUI(new javax.swing.plaf.basic.BasicTabbedPaneUI() {
    @Override
    protected void paintTabBackground(Graphics g, int tabPlacement,
                                      int tabIndex, int x, int y, int w, int h, boolean isSelected) {
        if (isSelected) {
            g.setColor(new Color(255, 255, 200)); // màu tab được chọn
        } else {
            g.setColor(new Color(255, 255, 230)); // màu tab chưa chọn
        }
        g.fillRect(x, y, w, h);
    }
});
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTongThu = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        cboThangThu = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cboNamThu = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTongChi = new javax.swing.JTable();
        Jlabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cboThangChi = new javax.swing.JComboBox<>();
        cboNamChi = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        tblTongThu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Tháng", "Năm", "Tiền đơn hàng", "Tiền xuất kho", "Tổng doanh thu"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTongThu);

        jLabel3.setText("Tháng");

        cboThangThu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Năm");

        cboNamThu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton2.setText("All");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(290, 290, 290)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboThangThu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboNamThu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1020, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cboThangThu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cboNamThu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tổng thu", jPanel1);

        tblTongChi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Tháng", "Năm", "Tiền nhập kho", "Tiền lương", "Tiền chi tiêu"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblTongChi);

        Jlabel1.setText("Tháng");

        jLabel2.setText("Năm");

        cboThangChi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cboNamChi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("All");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(Jlabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboThangChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboNamChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1015, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Jlabel1)
                    .addComponent(cboThangChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cboNamChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tổng chi", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1084, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jTabbedPane1)
                    .addContainerGap()))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 618, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jTabbedPane1)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        selectAll(cboThangChi, cboNamChi);
        fillTableTongChi();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        selectAll(cboThangThu, cboNamThu);
        fillTableTongChi();
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Jlabel1;
    private javax.swing.JComboBox<String> cboNamChi;
    private javax.swing.JComboBox<String> cboNamThu;
    private javax.swing.JComboBox<String> cboThangChi;
    private javax.swing.JComboBox<String> cboThangThu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblTongChi;
    private javax.swing.JTable tblTongThu;
    // End of variables declaration//GEN-END:variables

    @Override
    public void open() {
        this.fillNamTongChi();
        this.fillNamTongThu();
        this.fillThangTongThu();
        this.fillThangTongChi();
        this.addComboBoxChiListeners();
        this.addComboBoxThuListeners();
        this.fillTableTongThu();
        this.fillTableTongChi();
    }

    @Override
    public void checkAll() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void uncheckAll() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void deleteCheckedItems() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void edit() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void fillTableTongThu() {
    DefaultTableModel model = (DefaultTableModel) tblTongThu.getModel();
    model.setRowCount(0);

    Integer thang = cboThangThu.getSelectedItem().toString().equals("All")
            ? null : Integer.valueOf(cboThangThu.getSelectedItem().toString());
    Integer nam = cboNamThu.getSelectedItem().toString().equals("All")
            ? null : Integer.valueOf(cboNamThu.getSelectedItem().toString());

    try {
        List<TotalRevenue> list = daott.findByCondition(thang, nam);
        for (TotalRevenue tt : list) {
            model.addRow(new Object[]{
                tt.getId(),
                tt.getMonth(),
                tt.getYear(),
                tt.getOrderIncome(),
                tt.getExportIncome(),
                tt.getTotalIncome()
            });
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}

    @Override
    public void fillTableTongChi() {
    DefaultTableModel model = (DefaultTableModel) tblTongChi.getModel();
    model.setRowCount(0);

    Integer thang = cboThangChi.getSelectedItem().toString().equals("All")
            ? null : Integer.valueOf(cboThangChi.getSelectedItem().toString());
    Integer nam = cboNamChi.getSelectedItem().toString().equals("All")
            ? null : Integer.valueOf(cboNamChi.getSelectedItem().toString());

    try {
        List<TotalExpenses> list = daotc.findByCondition(thang, nam);
        for (TotalExpenses tc : list) {
            model.addRow(new Object[]{
                tc.getId(),
                tc.getMonth(),
                tc.getYear(),
                tc.getImportExpense(),
                tc.getSalaryExpense(),
                tc.getTotalExpense()
            });
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}
private void fillThangTongThu() {
        cboThangThu.removeAllItems();
        cboThangThu.addItem("All");
        String sql = "SELECT DISTINCT month FROM TotalRevenue ORDER BY month";
        try (ResultSet rs = XJdbc.executeQuery(sql)) {
            while (rs.next()) {
                cboThangThu.addItem(String.valueOf(rs.getInt("month")));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillNamTongThu() {
        cboNamThu.removeAllItems();
        cboNamThu.addItem("All");
        String sql = "SELECT DISTINCT year FROM TotalRevenue ORDER BY year";
        try (ResultSet rs = XJdbc.executeQuery(sql)) {
            while (rs.next()) {
                cboNamThu.addItem(String.valueOf(rs.getInt("year")));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
private void fillThangTongChi() {
        cboThangChi.removeAllItems();
        cboThangChi.addItem("All");
        String sql = "SELECT DISTINCT month FROM TotalExpenses ORDER BY month";
        try (ResultSet rs = XJdbc.executeQuery(sql)) {
            while (rs.next()) {
                cboThangChi.addItem(String.valueOf(rs.getInt("month")));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fillNamTongChi() {
        cboNamChi.removeAllItems();
        cboNamChi.addItem("All");
        String sql = "SELECT DISTINCT year FROM TotalExpenses ORDER BY year";
        try (ResultSet rs = XJdbc.executeQuery(sql)) {
            while (rs.next()) {
                cboNamChi.addItem(String.valueOf(rs.getInt("year")));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void selectAll(JComboBox... combos) {
        for (JComboBox combo : combos) {
            combo.setSelectedItem("All");
        }
    }
    private void addComboBoxThuListeners() {
    cboThangThu.addActionListener(e -> fillTableTongThu()); // chỉ load table thôi
    cboNamThu.addActionListener(e -> fillTableTongThu());   // chỉ load table thôi
}
    private void addComboBoxChiListeners() {
    cboThangChi.addActionListener(e -> fillTableTongChi()); // chỉ load table thôi
    cboNamChi.addActionListener(e -> fillTableTongChi());   // chỉ load table thôi
}
}
