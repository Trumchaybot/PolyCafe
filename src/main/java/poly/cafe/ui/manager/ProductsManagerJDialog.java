/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package poly.cafe.ui.manager;

import java.awt.Frame;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import poly.cafe.dao.impl.ProductDetailsDAOImpl;
import poly.cafe.dao.impl.MaterialsDAOImpl;
import poly.cafe.dao.impl.ProductsDAOImpl;
import poly.cafe.entity.ProductDetails;
import poly.cafe.entity.Materials;
import poly.cafe.entity.Products;
import poly.cafe.util.XDialog;
import poly.cafe.dao.MaterialsDAO;
import poly.cafe.dao.ProductDetailsDAO;
import poly.cafe.dao.ProductsDAO;

/**
 *
 * @author admin
 */
public class ProductsManagerJDialog extends javax.swing.JFrame {
    private int SanPhamId;
    
Products sp = new Products();
ProductsDAO daosp = new ProductsDAOImpl();
ProductDetailsDAO daoChiTiet = new ProductDetailsDAOImpl();
MaterialsDAO daoVatLieu = new MaterialsDAOImpl();
private List<ProductDetails> currentList = new ArrayList<>();
public void setSanPhamId(int id) {
        this.SanPhamId = id;
        lblidsp.setText(String.valueOf(id));  // Gán lên label
    }
    /**
     * Creates new form SanPhamManagerJdialog
     */
    public ProductsManagerJDialog() {
        initComponents();
    }
public ProductsManagerJDialog(Frame owner, boolean modal) {
    super();
    initComponents();
    slider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                int value = slider.getValue();
                lblDinhMuc.setText(value + "");
            }
        });
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtTen = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtGia = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMoTa = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblVatLieu = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        btnRevome = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtLuong = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtKhen = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        slider = new javax.swing.JSlider();
        lblDinhMuc = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblidsp = new javax.swing.JLabel();
        btnReload = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Tên sản phẩm");

        jLabel2.setText("Giá bán");

        jLabel3.setText("Mô tả");

        txtMoTa.setColumns(20);
        txtMoTa.setRows(5);
        jScrollPane1.setViewportView(txtMoTa);

        tblVatLieu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Tên vật liệu", "Số lượng", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblVatLieu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblVatLieuMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblVatLieu);

        jLabel4.setText("Nguyên vật liệu");

        btnSave.setText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDel.setText("Xóa");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        jButton5.setText("Thêm vật liệu");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        btnRevome.setText("Xóa vật liệu");
        btnRevome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRevomeActionPerformed(evt);
            }
        });

        jLabel5.setText("Lương cơ bản");

        jLabel6.setText("Lương vượt định mức");

        jLabel7.setText("Định mức:");

        slider.setValue(100);

        lblDinhMuc.setText("100");

        jLabel9.setText("id sản phẩm:");

        lblidsp.setText("Chưa có sản phẩm");

        btnReload.setText("Reload");
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRevome, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnReload))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel1)
                                                .addComponent(jLabel5)
                                                .addComponent(txtTen)
                                                .addComponent(txtLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(56, 56, 56)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel6)
                                                .addComponent(txtGia)
                                                .addComponent(txtKhen, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(15, 15, 15)
                                                    .addComponent(jLabel7)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(lblDinhMuc))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel9)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblidsp)))
                                    .addGap(36, 36, 36))))
                        .addGap(0, 42, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(lblidsp))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(lblDinhMuc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKhen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(btnReload))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnDel)
                    .addComponent(btnRevome)
                    .addComponent(jButton5))
                .addGap(42, 42, 42))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        this.test();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        // TODO add your handling code here:
        try {
            int productId = Integer.parseInt(lblidsp.getText().trim());
            fillToTable(productId);
        } catch (NumberFormatException e) {
            XDialog.alert(this, "ID sản phẩm không hợp lệ.");
        }
    }//GEN-LAST:event_btnReloadActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        // TODO add your handling code here:
        this.delete();
    }//GEN-LAST:event_btnDelActionPerformed

    private void btnRevomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRevomeActionPerformed
        // TODO add your handling code here:
        this.removeVatLieu();
    }//GEN-LAST:event_btnRevomeActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        this.update();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void tblVatLieuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblVatLieuMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            this.updateQuantity();
        }
    }//GEN-LAST:event_tblVatLieuMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductsManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductsManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductsManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductsManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductsManagerJDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnReload;
    private javax.swing.JButton btnRevome;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDinhMuc;
    private javax.swing.JLabel lblidsp;
    private javax.swing.JSlider slider;
    private javax.swing.JTable tblVatLieu;
    private javax.swing.JTextField txtGia;
    private javax.swing.JTextField txtKhen;
    private javax.swing.JTextField txtLuong;
    private javax.swing.JTextArea txtMoTa;
    private javax.swing.JTextField txtTen;
    // End of variables declaration//GEN-END:variables
public void test() {
        try {
            ProductsDAO sanPhamDAO = new ProductsDAOImpl();
            Products SanPhamDangChon = null;

            // Lấy ID từ label
            String idStr = lblidsp.getText().trim();

            if (!idStr.isEmpty()) {
                try {
                    int productId = Integer.parseInt(idStr);
                    SanPhamDangChon = sanPhamDAO.findById(productId);
                } catch (NumberFormatException e) {
                    XDialog.alert(this, "ID sản phẩm không hợp lệ!");
                    return;
                }
            }

            // Nếu không tìm thấy đơn hàng => Tạo mới
            if (SanPhamDangChon == null) {
                boolean confirm = XDialog.confirm("Không tìm thấy sản phẩm. Bạn có muốn tạo mới không?");
                if (!confirm) {
                    return;
                }

                Products sanPhamMoi = getForm(); // <-- Tạo từ dữ liệu nhập trên form
                if (sanPhamMoi == null) {
                    XDialog.alert(this, "Vui lòng điền đầy đủ thông tin sản phẩm.");
                    return;
                }

                int idMoi = sanPhamDAO.insertAndReturnId(sanPhamMoi);
                if (idMoi == -1) {
                    XDialog.alert(this, "Tạo sản phẩm thất bại!");
                    return;
                }

                SanPhamDangChon = sanPhamDAO.findById(idMoi); // Lấy lại đơn hàng vừa tạo
                lblidsp.setText(String.valueOf(idMoi)); // Cập nhật lên form
            }

            // Mở dialog quản lý kho
            KhoManagerJDialog dialog = new KhoManagerJDialog(this, true, SanPhamDangChon, "SANPHAM");
            dialog.setVisible(true);

        } catch (Exception ex) {
            ex.printStackTrace();
            XDialog.alert(this, "Đã xảy ra lỗi khi xử lý đơn hàng.");
        }
        fillToTable(sp.getProductId());
        try {
            int productId = Integer.parseInt(lblidsp.getText().trim());
            fillToTable(productId);
        } catch (NumberFormatException e) {
            XDialog.alert(this, "ID đơn hàng không hợp lệ.");
        }
}
public void setForm(Products sp) {
    if (sp == null) {
        return;
    }

    lblidsp.setText(String.valueOf(sp.getProductId()));
    txtTen.setText(sp.getProductName());
    txtMoTa.setText(sp.getDescription());
    slider.setValue(sp.getTarget());
    txtGia.setText(String.valueOf(sp.getUnitPrice()));
    txtLuong.setText(String.valueOf(sp.getBasicSalary()));
    txtKhen.setText(String.valueOf(sp.getTargetSalary()));
    
    if (sp.getProductId() > 0) {
        this.fillToTable(sp.getProductId());
    }
}

public Products getForm() {
    Products sp = new Products();

    try {
        // Lấy và gán các giá trị
        sp.setProductId(Integer.parseInt(lblidsp.getText().trim()));
        sp.setProductName(txtTen.getText().trim());
        sp.setDescription(txtMoTa.getText().trim());
        sp.setTarget(slider.getValue()); // slider trả về int
        sp.setUnitPrice(Double.parseDouble(txtGia.getText().trim()));
        sp.setBasicSalary(Double.parseDouble(txtKhen.getText().trim()));
        sp.setTargetSalary(Double.parseDouble(txtLuong.getText().trim()));

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập đúng định dạng số!");
        return null; // nếu lỗi thì trả về null
    }

    return sp;
}
 public void fillToTable(int productId) {
    DefaultTableModel model = (DefaultTableModel) tblVatLieu.getModel();
    model.setRowCount(0); // Xóa dữ liệu cũ
    currentList = daoChiTiet.findByProductId(productId);

    for (ProductDetails ct : currentList) {
        Materials nvl = daoVatLieu.findById(ct.getMaterialId());
        ct.setMaterial(nvl); // gắn vào entity để dùng sau

        Object[] row = {
            nvl != null ? nvl.getMaterialName(): "Không tìm thấy", // Tên vật liệu
            ct.getQuantity(),                                       // Số lượng
            false // checkbox
        };
        model.addRow(row);
    }
}
 public void updateQuantity() {

    int selectedRow = tblVatLieu.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để cập nhật số lượng!");
        return;
    }

    String input = JOptionPane.showInputDialog(this, "Số lượng mới:");
    if (input == null || input.trim().isEmpty()) return; // Bấm Cancel hoặc không nhập gì

    try {
        int newQuantity = Integer.parseInt(input.trim());
        if (newQuantity <= 0) {
            JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!");
            return;
        }

        // Lấy ID của chi tiết đơn hàng
        int ctId = (int) tblVatLieu.getValueAt(selectedRow, 0);
        ProductDetails ct = daoChiTiet.findById(ctId);

        if (ct == null) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy chi tiết đơn hàng tương ứng!");
            return;
        }

        Materials nvl = ct.getMaterial(); // Lấy thông tin sản phẩm để biết đơn giá
        if (sp == null) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy sản phẩm tương ứng!");
            return;
        }

        // Cập nhật số lượng và tổng tiền
        ct.setQuantity(newQuantity);
        daoChiTiet.update(ct);

        fillToTable(sp.getProductId()); // Refresh lại bảng

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập số hợp lệ!");
    }
}
 public void update() {
    Products sp = getForm();
    if (sp == null) {
        XDialog.alert(this, "Dữ liệu không hợp lệ!");
        return;
    }

    // Kiểm tra trạng thái đơn hiện tại từ CSDL (để tránh sửa từ UI)
    Products sanPhamCu = daosp.findById(sp.getProductId());
    if (sanPhamCu == null) {
        XDialog.alert(this, "Không tìm thấy đơn hàng!");
        return;
    }
    

    try {
        daosp.update(sp);
        XDialog.alert(this, "Cập nhật đơn hàng thành công!");
    } catch (Exception e) {
        e.printStackTrace();
        XDialog.alert(this, "Cập nhật đơn hàng thất bại!");
    }
}
public void removeVatLieu() {
    for (int i = 0; i < tblVatLieu.getRowCount(); i++) {
        Boolean checked = (Boolean) tblVatLieu.getValueAt(i, 2); // cột checkbox
        if (Boolean.TRUE.equals(checked)) {
            ProductDetails ct = currentList.get(i); // lấy đúng object theo index
            daoChiTiet.deleteById(ct.getId());
            System.out.println("Đã xóa: " + ct.getId());
        }
    }
    int productId = Integer.parseInt(lblidsp.getText().trim());
            fillToTable(productId);
}

// public void removeVatLieu() {
//        for (int i = 0; i < tblVatLieu.getRowCount(); i++) {
//            Boolean checked = (Boolean) tblVatLieu.getValueAt(i, 2); // cột checkbox
//            if (Boolean.TRUE.equals(checked)) {
//                ChiTietSanPham ct = daoChiTiet.findById((int) tblVatLieu.getValueAt(i, 0)); // cột ID
//                daoChiTiet.deleteById(ct.getId());
//            }
//        }
//        fillToTable(sp.getProductId());
//    }

public void delete() {
    String idStr = lblidsp.getText().trim();

    if (idStr.isEmpty()) {
        XDialog.alert(this, "Không có sản phẩm nào được chọn để xóa!");
        return;
    }

    int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa sản phẩm này?", "Xác nhận", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) return;

    try {
        int productId = Integer.parseInt(idStr);


        // Xóa đơn hàng
        daosp.deleteById(productId);

        XDialog.alert(this, "Xóa sản phẩm thành công!");
        this.dispose();

    } catch (NumberFormatException e) {
        XDialog.alert(this, "ID sản phẩm không hợp lệ!");
    } catch (Exception e) {
        e.printStackTrace();
        XDialog.alert(this, "Xóa sản phẩm thất bại!");
    }
}

}
